# -*- coding: utf-8 -*-
"""EDA PYTHON_JI'S PROJECT

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lbWu-UljlFoczsOKwPJdZlWryUb9Nbt0
"""

#import libraries

import pandas as pd
import seaborn as sns

df = pd.read_csv("TWO_CENTURIES_OF_UM_RACES.csv")

#see the data that's been imported
df.head(10)

df.shape

#knowing the data types
df.dtypes

#clean up data
#by only taking female runner in USA races, with 50km of 50 miles distance,

df[df['Event distance/length'] == '50km']

#combine 50km and 50mi
df[df['Event distance/length'].isin (['50km'])]

df[(df['Event distance/length'].isin (['50km'])) & (df['Athlete gender'] == 'F')]

#cleaning up the event name
df[df['Event name']=='Olde Girdled Grit 50K (USA)']['Event name'].str.split('(').str.get(1).str.split(')').str.get(0)

#only taking USA races
df[df['Event name'].str.split('(').str.get(1).str.split(')').str.get(0) =='USA']

#only USA races, female runner, 50 km distance
df[(df['Event distance/length'].isin (['50km'])) & (df['Athlete gender'] == 'F') & (df['Event name'].str.split('(').str.get(1).str.split(')').str.get(0) =='USA')]

#putting it into a new object
df2 = df[(df['Event distance/length'].isin (['50km'])) & (df['Athlete gender'] == 'F') & (df['Event name'].str.split('(').str.get(1).str.split(')').str.get(0) =='USA')]

df2.head(10)

#removing (USA) from event name
df2['Event name'].str.split('(').str.get(0)

df2['Event name'] = df2['Event name'].str.split('(').str.get(0)

df2.head(10)

#clean up the age
df2['athlete_age'] = 2018 - df2['Athlete year of birth']

#remove h from athlete performance
df2['Athlete performance'] = df2['Athlete performance'].str.split(' ').str.get(0)

df2.head(10)

df2.shape

#drop columns : athlete year of birth, date events, athlete club

df2 = df2.drop(['Event dates', 'Athlete year of birth', 'Athlete club'], axis = 1)

df2.head(10)

df.isna().sum()

df2[df2['athlete_age'].isna()==1]

#check duplicates values
df2[df2.duplicated() == True]

#reset index
df2.reset_index(drop = True)

#fix types
df2.dtypes

df2.head(10)

#changing age types
df2['athlete_age'] = df2['athlete_age'].astype(str)

df2['athlete_age'] = df2['athlete_age'].fillna(-1)

df2.dtypes

df2.head()

#rename columns

df2 = df2.rename(columns = {
    'Year of event' : 'year',
    'Event name': 'race_day',
    'Event distance/length': 'race_length',
    'Event number of finishers': 'race_number_of_finishers',
    'Athlete performance'  : 'athlete_performance' ,
    'Athlete country' : 'athlete_country',
    'Athlete age category' : 'athlete_age_cat',
    'Athlete average speed' : 'athlete_avg_speed',
    'Athlete ID' :'athlete_id',

})

df2 = df2.rename(columns = {
    'race_day': 'race_name',

})

df2.head(10)

df2 = df2.drop(['year'], axis = 1)

df2 = df2.drop(['Athlete gender'], axis = 1)

#reset index
df2.reset_index(drop = True)

#CLEANED DATA
df2.head(1918)

df2.shape

#charts and graphs

sns.histplot(df2['athlete_age_cat'])

#a little fixing
df2['athlete_age'] = pd.to_numeric(df2['athlete_age'], errors='coerce')
df2 = df2.dropna(subset=['athlete_age'])

# Define bins and labels
bins = [20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]
labels = ['20-30', '30-40', '40-50', '50-60', '60-70', '70-80', '80-90', '90-100', '100-110', '110-120']

df2['age_group'] = pd.cut(df2['athlete_age'], bins=bins, labels=labels)

sns.histplot(data=df2, x='age_group')

#fixing
df2['athlete_avg_speed'] = pd.to_numeric(df2['athlete_avg_speed'], errors='coerce')
sns.displot(df2[df2['race_length'] == '50km']['athlete_avg_speed'])

# fixing
print(df.columns)
df.columns = df.columns.str.strip()

# Corrected violin plot
sns.violinplot(data=df2, x='race_length', y='athlete_avg_speed', hue='athlete_age_cat')

sns.lmplot(data=df2, x='athlete_age', y='athlete_avg_speed', hue = 'athlete_age_cat')

#Top 5 Countries with Highest Athlete Average Speed
top_countries = (df2.groupby('athlete_country')['athlete_avg_speed']
       .mean()
       .sort_values(ascending=False)
       .head(5)
)

print(top_countries)

#Top 5 Races with Longest Duration

top_countries = (df2.groupby('race_name')['athlete_performance']
       .max()
       .sort_values(ascending=False)
       .head(5)
)
print(top_countries)

#Top 5 Races with Longest Duration
top_countries = (df2.groupby('race_name')['athlete_performance']
       .min()
       .sort_values(ascending=False)
       .head(5)
)

print(top_countries)

#Top 5 Countries with Most Participants
top_countries2 = df2['athlete_country'].value_counts().head(5).reset_index()
top_countries2.columns = ['Country', 'Participants']

others_count = df2['age_group'].value_counts().iloc[5:].sum()

top_countries2.loc[len(top_countries2)] = ['Others', others_count]

print(top_countries2)

df2['athlete_performance'] = df2['athlete_performance'].astype(str)

#Top 5 Races with Most Participants
participants_per_race = df2['race_name'].value_counts().head(5).reset_index()
participants_per_race.columns = ['Race Name', 'Participants']


print(participants_per_race)

print(participants_per_race.columns)

#Top 5 Age Groups
top_5_age_groups = df2['age_group'].value_counts().head(5).reset_index()
top_5_age_groups.columns = ['Age Group', 'Participants']

others_count = df2['age_group'].value_counts().iloc[5:].sum()
top_5_age_groups.loc[len(top_5_age_groups)] = ['Others', others_count]

# Display the result
print(top_5_age_groups)

df2.head(5)